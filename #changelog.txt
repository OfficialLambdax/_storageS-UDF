28.02.2022 (DD/MM/YYYY) 0.1.5.2

	SCRIPT BREAKING CHANGES
	CODE EXECUTION VULNERABILITY DETECTED

	Changed
		- _storageAO_Shorten() got a second, more CPU intensive, method to shorten the storage better
		
		- _storageG_Math() got renamed to _storageG_Execute()
		
	What you need to change
	
		Change _storageG_Math() to _storageG_Execute() if it was used.
		
		
	Exploit Warning
	
		_storageG_Execute() is vulnerable to malicious code execution.
		Please view the "# Execute Vulnerability" dir in the example folder.


26.02.2022 (DD/MM/YYYY) 0.1.5.1

	Added
		- A Data storage named _storageAO


25.02.2022 (DD/MM/YYYY) 0.1.5

	Added
		- A Ring buffer named _storageRBr
		
		- A Ring buffer named _storageRBx
		
		- A WIP Ring buffer named _storageRBs
		
	Changed
	
		- Rearranged and added various examples
		
		- _storageO_TidyGroupVars() got renamed to _storageO_DestroyGroup()
	
	Removed
	
		- The WIP Ring buffer _storageGORB


24.02.2022 (DD/MM/YYYY) 0.1.4.1

	A few bug fixes for the latest added methods.


24.02.2022 (DD/MM/YYYY) 0.1.4

	Added
		- A listing method named _storageGL
		
		- A listing method named _storageGLx

	Removed
		- _storageALRapidX duo to it being to inefficient.


24.02.2022 (DD/MM/YYYY) 0.1.3.3
	
	Fixed
		- A crucial typo within __storageGO_AddGroupVar() that lead into the creation of endless groups that wherent deleted.
		

23.02.2022 (DD/MM/YYYY) 0.1.3.2

	Added
		- A listing method named _storageAL (Array based).
		
		- A _storageAL improvement method named _storageALRapid.


23.02.2022 (DD/MM/YYYY) 0.1.3.1

	Added
		- A listing method named _storageML (Map based). Only available for the Autoit Beta. Requires "_storageS-Beta_UDF.au3"


22.02.2022 (DD/MM/YYYY) 0.1.3
	
	Optimizations for the _storageGO Method
	
	Added
		- A listing method named _storageOL (DictObj based). This method is not a data storage, but a data list. Think of a 1D array.
		

19.02.2022 (DD/MM/YYYY) 0.1.2.8

	Further Optimizations for the _storageGO Method
	
	Added
		- _storageGO_DestroyVar() with which a specific var of a group can be free'd.


19.02.2022 (DD/MM/YYYY) 0.1.2.7

	Optimizations for the _storageGO Method
	

18.02.2022 (DD/MM/YYYY) 0.1.2.6

	Added
		- _storageGO_GetInfo(). Returns various information about the _storageGO method state, like the amount of storage vars, how many are free and more.
		
		- _storageS_GetVarSize(). Returns the Size in bytes of the given Variable. Objects, Maps and functions are not supported.
		Objects not because im not well into them. Maps not because they are Beta only. And functions.. i mean, how to measure a functions size.


18.02.2022 (DD/MM/YYYY) 0.1.2.5

	Added
		- _storageGO_CreateGroup(). A storage can no longer be created if the tied group to it doesnt exist.
		It must be created first. If a group is destroyed with _storageGO_DestroyGroup() then the same affect applies.
		This change is done to further protect against accidental memory leaks.


18.02.2022 (DD/MM/YYYY) 0.1.2.4

	Fixed
		- _storageGO remembering storages, that didnt exist.
		
	Added
		- _storageGO_GetClaimedVars(). A debug function to find all claimed variables of this method.


17.02.2022 (DD/MM/YYYY) 0.1.2.3
	
	Further Optimizations

17.02.2022 (DD/MM/YYYY) 0.1.2.2

	Hotfix


17.02.2022 (DD/MM/YYYY) 0.1.2.1

	Optimized _storageGO


17.02.2022 (DD/MM/YYYY) 0.1.2

	Added
		- A new method called _storageGO.
		
		
	Likely not going to happen
	
		Maps
			Autoit Beta Only and becomes increasingly slower the more storages are created. Much much much slower then the DictObj.
			Commands like MapAppend() are inaccessible in the Autoit Stable. So Execute() had to be used to circumenvent the Au3Check errors.
			Which also decreased their performance.
			
			Maps would generally only make sense in a low storage count scenario. Everything below 1000. And where, similiar to the DictObj,
			not much data is stored in them. But even then the DictObj is still faster. So why include it then?.


16.02.2022 (DD/MM/YYYY) 0.1.1

	Added
		- _storageG_Calc() which can be used to calculate the stored data with the given Operator and the given $vElementData.
		Aka 1 + 2. Will save and/or return the result.
		X operator Y - Where X is the store element, operator the given $Operator and Y the $vElementData.
		The X can be Switched to Y by setting $bSwitch to True.
		
		- _storageG_Math() which can be used to run math at the stored data with the given Algorhytmn or Function.
		Aka Cos(5) Or _MyMathAlgo(5). Will save and/or return the result.
		
		- _storageG_DestroyGroup(). _storageG_TidyGroupVars() only overwrites the known variables with Null as they cannot be destroyed.
		Each variable is stored in a Object and that Object stays. _storageG_DestroyGroup() can be used to also remove the object.
		However _storageG_Overwrite() only adds variables to the Object if the are not declared yet. So if you destroy a group and later then
		store data in a previously declared variable then the variable will not be readded to the group, because the function only checks
		if a variable is yet declared, if not so then adds it. The function _storageG_GetGroupVars() would then give a invalid return.
		And _storageG_TidyGroupVars() would not be able to tidy the reused variables. Thats why both functions are seperated.
		
		So make sure you only use said function when you are sure that you are not going to reuse the same variables after the Group got destroyed.
			
	
	Remarks
		_storageG_Calc() and _storageG_Math() where added for when you want to just add or calculate something quickly.
		Using these functions is just faster then using eg.
		
		from	_storageG_Overwrite(123, 'int', _storageG_Read(123, 'int') + 1)
		to		_storageG_Calc(123, 'int', 1, '+')


13.02.2022 (DD/MM/YYYY) 0.1
	- Release date